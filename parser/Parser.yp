%start feature

%{

use AST;
my $tree = AST->new();
my $feature = AST::Feature->new();
my $scenario = AST::Scenario->new();

%}

%%

feature                  : header feature_elements
                         { $feature->set_header($_[1]);
                           $tree->add_feature($feature); }
                         ;

feature_elements         : scenarios
                         ;

scenarios                : scenario scenarios
                         | scenario
                         ;

scenario                 : scenario_keyword line_to_eol steps
                         {
                           $scenario->set_name($_[2]);
                           $feature->add_scenario($scenario);
                           $scenario = AST::Scenario->new();
                         }
                         ;

steps                    : step steps
                         | step
                         ;

step                     : step_keyword line_to_eol
                         { $scenario->add_step("$_[1] $_[2]") }
                         ;

%%

sub Lexer {
  my ($parser) = shift;

  # check to see if data to be parsed is present
  $parser->YYData->{INPUT} or return('',undef);

  # clean leading whitespace
  $parser->YYData->{INPUT} =~ s/^[\s\t]+//s;

  for ($parser->YYData->{INPUT}) {
    return ('header',           $1) if s/^Feature(.+?)Scenario/Scenario/so;
    return ('scenario_keyword', $1) if s/^(Scenario\s*?:)//so;
    return ('step_keyword',     $1) if s/^(Given|When|Then|And|But)//so;
    return ('line_to_eol',      $1) if s/^([^\n\r]+)//so;
  }
}

sub Error {
  my ($parser) = shift;
  exists $parser->YYData->{ERRMSG}
  and do {
    print $parser->YYData->{ERRMSG};
    delete $parser->YYData->{ERRMSG};
    return;
  };
  print "Syntax error: expecting \"",$parser->YYExpect,
        "\" but got \"",$parser->YYCurtok,"\"\n";
  print $parser->YYData->{ERRMSG};
}

sub parse {
  my ($self, $input) = @_;
  $self->YYData->{INPUT} = $input;
  my $result = $self->YYParse(yylex => \&Lexer, yyerror => \&Error, yydebug => 0x0);
  return $result;
}

# vim:syn=perl:
